Option Strict Off
Option Explicit On

Imports System.Xml.Serialization
Imports System.IO
Imports System.ComponentModel.Composition
Imports MedatechUK.Deserialiser
Imports MedatechUK.Logging

Namespace Deserialiser

    <Export(GetType(ILexor))>
    <ExportMetadata("LexName", "LexConfig")>
    <ExportMetadata("LexVers", "1.0")>
    <ExportMetadata("Parser", eParser.xml)>
    <ExportMetadata("SerialType", GetType(Deserialiser.lexdef))>
    <ExportMetadata("LoadType", "abc")>
    Public Class LexConfig
        Inherits Lexor
        Implements ILexor

    End Class


    Public Enum ePropertyType
        field
        type
        enumeration

    End Enum
    '------------------------------------------------------------------------------
    ' <auto-generated>
    '     This code was generated by a tool.
    '     Runtime Version:2.0.50727.9151
    '
    '     Changes to this file may cause incorrect behavior and will be lost if
    '     the code is regenerated.
    ' </auto-generated>
    '------------------------------------------------------------------------------

    '
    'This source code was auto-generated by xsd, Version=2.0.50727.1432.
    '


    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.1432"),
         System.SerializableAttribute(),
         System.Diagnostics.DebuggerStepThroughAttribute(),
         System.ComponentModel.DesignerCategoryAttribute("code"),
         System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True),
         System.Xml.Serialization.XmlRootAttribute([Namespace]:="", IsNullable:=False)>
    Public Class lexdef
        Implements IDisposable

        Private recordtypesField As New List(Of lexdefRecord)

        Private assembliesField As New List(Of lexdefAssembly)

        Private nameField As String

        Private versionField As Decimal

        Private assemblyField As String

        Public Function assemblyByName(name As String) As lexdefAssembly
            For Each l As lexdefAssembly In assembliesField
                If String.Compare(l.name, name) = 0 Then
                    Return l
                End If
            Next
            Return Nothing
        End Function

        Public Function RecordTypeByAssembly(name As String) As lexdefRecord
            For Each l As lexdefRecord In recordtypes
                If String.Compare(l.assembly, name) = 0 Then
                    Return l
                End If
            Next
            Return Nothing
        End Function

        Sub New()

        End Sub

        '''<remarks/>
        <System.Xml.Serialization.XmlArrayItemAttribute("record", IsNullable:=False)>
        Public Property recordtypes As List(Of lexdefRecord)
            Get
                Return Me.recordtypesField
            End Get
            Set
                Me.recordtypesField = Value
            End Set
        End Property

        '''<remarks/>
        <System.Xml.Serialization.XmlArrayItemAttribute("assembly", IsNullable:=False)>
        Public Property assemblies As List(Of lexdefAssembly)
            Get
                Return Me.assembliesField
            End Get
            Set
                Me.assembliesField = Value
            End Set
        End Property

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = Value
            End Set
        End Property

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property version() As Decimal
            Get
                Return Me.versionField
            End Get
            Set
                Me.versionField = Value
            End Set
        End Property

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property [assembly]() As String
            Get
                Return Me.assemblyField
            End Get
            Set
                Me.assemblyField = Value
            End Set
        End Property

#Region "IDisposable Support"
        Private disposedValue As Boolean ' To detect redundant calls

        ' IDisposable
        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not disposedValue Then
                If disposing Then
                    ' TODO: dispose managed state (managed objects).
                End If

                ' TODO: free unmanaged resources (unmanaged objects) and override Finalize() below.
                ' TODO: set large fields to null.
            End If
            disposedValue = True
        End Sub

        ' TODO: override Finalize() only if Dispose(disposing As Boolean) above has code to free unmanaged resources.
        'Protected Overrides Sub Finalize()
        '    ' Do not change this code.  Put cleanup code in Dispose(disposing As Boolean) above.
        '    Dispose(False)
        '    MyBase.Finalize()
        'End Sub

        ' This code added by Visual Basic to correctly implement the disposable pattern.
        Public Sub Dispose() Implements IDisposable.Dispose
            ' Do not change this code.  Put cleanup code in Dispose(disposing As Boolean) above.
            Dispose(True)
            ' TODO: uncomment the following line if Finalize() is overridden above.
            ' GC.SuppressFinalize(Me)
        End Sub
#End Region
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.1432"),
     System.SerializableAttribute(),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code"),
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)>
    Partial Public Class lexdefRecord

        Sub New()

        End Sub

        Sub New(type As Byte, name As String, assembly As String)
            typeField = type
            nameField = name
            assemblyField = assembly

        End Sub

        Private typeField As Byte

        Private nameField As String

        Private assemblyField As String

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property type() As Byte
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = Value
            End Set
        End Property

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = Value
            End Set
        End Property

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property [assembly]() As String
            Get
                Return Me.assemblyField
            End Get
            Set
                Me.assemblyField = Value
            End Set
        End Property
    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.1432"),
     System.SerializableAttribute(),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code"),
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)>
    Partial Public Class lexdefAssembly

        Private propertyField As New List(Of lexdefAssemblyProperty)

        Private nameField As String

        Function propertyByName(name As String) As lexdefAssemblyProperty
            For Each l As lexdefAssemblyProperty In propertyField
                If String.Compare(l.name, name) = 0 Then
                    Return l
                End If
            Next
            Return Nothing
        End Function

        Sub New()

        End Sub

        Sub New(name As String)
            nameField = name
        End Sub

        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute("property")>
        Public Property [property] As List(Of lexdefAssemblyProperty)
            Get
                Return Me.propertyField
            End Get
            Set
                Me.propertyField = Value
            End Set
        End Property

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = Value
            End Set
        End Property

    End Class

    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "2.0.50727.1432"),
     System.SerializableAttribute(),
     System.Diagnostics.DebuggerStepThroughAttribute(),
     System.ComponentModel.DesignerCategoryAttribute("code"),
     System.Xml.Serialization.XmlTypeAttribute(AnonymousType:=True)>
    Partial Public Class lexdefAssemblyProperty

        Private nameField As String
        Private destnameField As String
        Private typeField As String
        Private enumerateField As String

        Private _PropType As ePropertyType
        Public ReadOnly Property PropType As ePropertyType
            Get
                If Not destnameField Is Nothing Then Return ePropertyType.field
                If Not typeField Is Nothing Then Return ePropertyType.type
                If Not enumerateField Is Nothing Then Return ePropertyType.enumeration

                Throw New NotSupportedException

            End Get
        End Property

        Sub New(action As ePropertyType, name As String, Value As String)

            _PropType = action
            Select Case action
                Case ePropertyType.field
                    nameField = name
                    destnameField = Value

                Case ePropertyType.type
                    nameField = name
                    typeField = Value

                Case ePropertyType.enumeration
                    nameField = name
                    enumerateField = Value

                Case Else
                    Throw New NotSupportedException

            End Select

        End Sub

        Sub New()

        End Sub

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = Value
            End Set
        End Property

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property destname() As String
            Get
                Return Me.destnameField
            End Get
            Set
                Me.destnameField = Value
            End Set
        End Property

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property type() As String
            Get
                Return Me.typeField
            End Get
            Set
                Me.typeField = Value
            End Set
        End Property

        '''<remarks/>
        <System.Xml.Serialization.XmlAttributeAttribute()>
        Public Property enumerate() As String
            Get
                Return Me.enumerateField
            End Get
            Set
                Me.enumerateField = Value
            End Set
        End Property

    End Class

End Namespace
